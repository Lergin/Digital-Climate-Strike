import { Inject, Injectable, OnInit, ProviderScope, ProviderType } from "@tsed/di";
import { Participation } from "../entity/Participation";
import WebSocket from 'ws';
import { HttpServer, PlatformApplication } from "@tsed/common";
import { serialize } from "@tsed/json-mapper";
import * as crypto from 'crypto'
import { WebSocketEvent, WebSocketMessage, WebSocketParticipationMessage } from "./WebSocketMessage";

/**
 * Authentication:
 * The client needs to send a key generated by generateAuthToken() as the first message,
 * every key can only be used once and must be used withing 5 minutes of requesting it.
 * In this project the key is provided via a BasicAuth secured HTTP GET (in ParticipationController).
 */
@Injectable({
  type: ProviderType.SERVICE,
  scope: ProviderScope.SINGLETON,
})
export class SocketService implements OnInit {
  wss: WebSocket.Server;
  authTokens: Map<string, number> = new Map();

  constructor(@HttpServer private httpServer: HttpServer) {
  }

  $onInit(){
    this.wss = new WebSocket.Server({ server: this.httpServer });

    this.wss.addListener('connection', (client) => {
      client.once('message', (data) => {
        const key = data.toString();
        if (this.authTokens.has(key) && this.authTokens.get(key)! < Date.now() + 1000 * 60 * 5) {
          (client as any).authenticated = true;
        } else {
          client.close();
        }
        this.authTokens.delete(key);
      })
    })
  }

  generateNewAuthToken(): string {
    const newToken = crypto.randomBytes(128).toString('base64');
    this.authTokens.set(newToken, Date.now());
    return newToken;
  }

  send<T extends WebSocketMessage>(data: T) {
    console.log(data);
    this.wss.clients.forEach(client => {
      if (client.readyState === WebSocket.OPEN && (client as any).authenticated) {
        client.send(JSON.stringify(data))
      }
    })
  }
}
